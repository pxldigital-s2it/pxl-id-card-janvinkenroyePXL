// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presences.Infrastructure;

namespace Presences.Infrastructure.Migrations
{
    [DbContext(typeof(PresencesContext))]
    [Migration("20211117143244_Fourth")]
    partial class Fourth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Presences.Domain.Moment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MomentType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Moments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MomentType = 0,
                            Name = "PE .NET Expert"
                        },
                        new
                        {
                            Id = 2,
                            MomentType = 1,
                            Name = "Examen .NET Expert"
                        },
                        new
                        {
                            Id = 3,
                            MomentType = 0,
                            Name = "PE Mobile Development"
                        },
                        new
                        {
                            Id = 4,
                            MomentType = 1,
                            Name = "Examen Mobile Development"
                        },
                        new
                        {
                            Id = 5,
                            MomentType = 1,
                            Name = "Examen Web Expert"
                        },
                        new
                        {
                            Id = 6,
                            MomentType = 1,
                            Name = "Examen Java Expert"
                        });
                });

            modelBuilder.Entity("Presences.Domain.MomentStudent", b =>
                {
                    b.Property<int>("MomentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MomentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MomentStudents");
                });

            modelBuilder.Entity("Presences.Domain.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 50317565,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d5bcca9-de1e-4d83-82f3-5cf3f64435c3",
                            EmailConfirmed = false,
                            FirstName = "Jochem",
                            LastName = "Beckers",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jochembeckers"
                        },
                        new
                        {
                            Id = 50531122,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deebfbc9-67d6-46a5-a45c-137614a37901",
                            EmailConfirmed = false,
                            FirstName = "Pieter",
                            LastName = "Geerts",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "pietergeerts"
                        },
                        new
                        {
                            Id = 84082214,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee6a4c7b-5583-4296-8349-a10706007263",
                            EmailConfirmed = false,
                            FirstName = "Chris",
                            LastName = "Goyens",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "chrisgoyens"
                        },
                        new
                        {
                            Id = 49014562,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49e88580-b20d-4a59-86ba-ad2cc6e31f0f",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            LastName = "Jacquemin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "stevenjacquemin"
                        },
                        new
                        {
                            Id = 91813987,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88adcf82-55bf-4a4d-bfaa-62284f786ee9",
                            EmailConfirmed = false,
                            FirstName = "Geoffrey",
                            LastName = "Jorissen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "geoffreyjorissen"
                        },
                        new
                        {
                            Id = 63117126,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e171f780-9c2e-415c-ae5a-f937a0082461",
                            EmailConfirmed = false,
                            FirstName = "Rob",
                            LastName = "Jorissen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "robjorissen"
                        },
                        new
                        {
                            Id = 30441858,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d098f2f-12bc-4c69-9c56-f44bc111a092",
                            EmailConfirmed = false,
                            FirstName = "Sigrid",
                            LastName = "Meesters",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sigridmeesters"
                        },
                        new
                        {
                            Id = 52449732,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc9bf18d-ca9f-4087-8f15-440ec70184e4",
                            EmailConfirmed = false,
                            FirstName = "Wouter",
                            LastName = "Paps",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "wouterpaps"
                        },
                        new
                        {
                            Id = 15559621,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5edb3ac-8e6c-472f-993a-719ad262737b",
                            EmailConfirmed = false,
                            FirstName = "Robby",
                            LastName = "Quintiens",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "robbyquintiens"
                        },
                        new
                        {
                            Id = 46559947,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43998ced-98bc-4f7d-91f2-eed305220b15",
                            EmailConfirmed = false,
                            FirstName = "Nadine",
                            LastName = "Vaesen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nadinevaesen"
                        },
                        new
                        {
                            Id = 11903691,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "486bf434-ccc2-4c2a-b53e-0788976bf4a6",
                            EmailConfirmed = false,
                            FirstName = "Jan",
                            LastName = "Vinkenroye",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "janvinkenroye"
                        },
                        new
                        {
                            Id = 97305845,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d64b9492-a6a1-4388-8d0b-4ce8b7763977",
                            EmailConfirmed = false,
                            FirstName = "Jeff",
                            LastName = "Willen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeffwillen"
                        });
                });

            modelBuilder.Entity("Presences.Domain.MomentStudent", b =>
                {
                    b.HasOne("Presences.Domain.Moment", null)
                        .WithMany("MomentStudents")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presences.Domain.Student", null)
                        .WithMany("MomentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Presences.Domain.Moment", b =>
                {
                    b.Navigation("MomentStudents");
                });

            modelBuilder.Entity("Presences.Domain.Student", b =>
                {
                    b.Navigation("MomentStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
