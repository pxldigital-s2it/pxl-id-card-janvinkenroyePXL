// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presences.Infrastructure;

namespace Presences.Infrastructure.Migrations
{
    [DbContext(typeof(PresencesContext))]
    [Migration("20211117142922_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Presences.Domain.Moment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MomentType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Moments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MomentType = 0,
                            Name = "PE .NET Expert"
                        },
                        new
                        {
                            Id = 2,
                            MomentType = 1,
                            Name = "Examen .NET Expert"
                        },
                        new
                        {
                            Id = 3,
                            MomentType = 0,
                            Name = "PE Mobile Development"
                        },
                        new
                        {
                            Id = 4,
                            MomentType = 1,
                            Name = "Examen Mobile Development"
                        },
                        new
                        {
                            Id = 5,
                            MomentType = 1,
                            Name = "Examen Web Expert"
                        },
                        new
                        {
                            Id = 6,
                            MomentType = 1,
                            Name = "Examen Java Expert"
                        });
                });

            modelBuilder.Entity("Presences.Domain.MomentStudent", b =>
                {
                    b.Property<int>("MomentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MomentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MomentStudents");
                });

            modelBuilder.Entity("Presences.Domain.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 50317565,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eb20a68-75b2-426d-81a7-c106189501e8",
                            EmailConfirmed = false,
                            FirstName = "Jochem",
                            LastName = "Beckers",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jochembeckers"
                        },
                        new
                        {
                            Id = 50531122,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e6051ef-c642-46d1-aff6-4f7fbfd3dacc",
                            EmailConfirmed = false,
                            FirstName = "Pieter",
                            LastName = "Geerts",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "pietergeerts"
                        },
                        new
                        {
                            Id = 84082214,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d166125-3c3d-4786-bdf0-f463fa258fe9",
                            EmailConfirmed = false,
                            FirstName = "Chris",
                            LastName = "Goyens",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "chrisgoyens"
                        },
                        new
                        {
                            Id = 49014562,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dba19cd-e587-4114-ab43-c4a1be388c45",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            LastName = "Jacquemin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "stevenjacquemin"
                        },
                        new
                        {
                            Id = 91813987,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01865b22-3d67-4866-b772-45a7398ddc6b",
                            EmailConfirmed = false,
                            FirstName = "Geoffrey",
                            LastName = "Jorissen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "geoffreyjorissen"
                        },
                        new
                        {
                            Id = 63117126,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40844bf9-6bca-4de2-a3e5-272041321b28",
                            EmailConfirmed = false,
                            FirstName = "Rob",
                            LastName = "Jorissen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "robjorissen"
                        },
                        new
                        {
                            Id = 30441858,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65f4aab7-31da-4cb9-9b80-5913566b40d3",
                            EmailConfirmed = false,
                            FirstName = "Sigrid",
                            LastName = "Meesters",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sigridmeesters"
                        },
                        new
                        {
                            Id = 52449732,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2732a37f-d4bf-45b4-92b1-203ea7a681ae",
                            EmailConfirmed = false,
                            FirstName = "Wouter",
                            LastName = "Paps",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "wouterpaps"
                        },
                        new
                        {
                            Id = 15559621,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efb53a24-7f98-4521-bfde-fff1880ba622",
                            EmailConfirmed = false,
                            FirstName = "Robby",
                            LastName = "Quintiens",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "robbyquintiens"
                        },
                        new
                        {
                            Id = 46559947,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "74e042c6-63b9-4969-af15-2d702ed1f359",
                            EmailConfirmed = false,
                            FirstName = "Nadine",
                            LastName = "Vaesen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nadinevaesen"
                        },
                        new
                        {
                            Id = 11903691,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9e6e4d4-cf37-475a-a4f2-831a0dd1e924",
                            EmailConfirmed = false,
                            FirstName = "Jan",
                            LastName = "Vinkenroye",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "janvinkenroye"
                        },
                        new
                        {
                            Id = 97305845,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "239f38d1-af8d-403f-bd35-8be836b3f9f2",
                            EmailConfirmed = false,
                            FirstName = "Jeff",
                            LastName = "Willen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeffwillen"
                        });
                });

            modelBuilder.Entity("Presences.Domain.MomentStudent", b =>
                {
                    b.HasOne("Presences.Domain.Moment", "Moment")
                        .WithMany("MomentStudents")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presences.Domain.Student", "Student")
                        .WithMany("MomentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Presences.Domain.Moment", b =>
                {
                    b.Navigation("MomentStudents");
                });

            modelBuilder.Entity("Presences.Domain.Student", b =>
                {
                    b.Navigation("MomentStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
