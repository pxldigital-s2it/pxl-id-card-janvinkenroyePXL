// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presences.Infrastructure;

namespace Presences.Infrastructure.Migrations
{
    [DbContext(typeof(PresencesContext))]
    [Migration("20211103105804_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Presences.Domain.Moment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MomentType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Moments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MomentType = 0,
                            Name = "PE .NET Expert"
                        },
                        new
                        {
                            Id = 2,
                            MomentType = 1,
                            Name = "Examen .NET Expert"
                        },
                        new
                        {
                            Id = 3,
                            MomentType = 0,
                            Name = "PE Mobile Development"
                        },
                        new
                        {
                            Id = 4,
                            MomentType = 1,
                            Name = "Examen Mobile Development"
                        },
                        new
                        {
                            Id = 5,
                            MomentType = 1,
                            Name = "Examen Web Expert"
                        },
                        new
                        {
                            Id = 6,
                            MomentType = 1,
                            Name = "Examen Java Expert"
                        });
                });

            modelBuilder.Entity("Presences.Domain.MomentStudent", b =>
                {
                    b.Property<int>("MomentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MomentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MomentStudent");
                });

            modelBuilder.Entity("Presences.Domain.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 50317565,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9456110a-b70e-40a0-9bc3-8c448894dd2f",
                            EmailConfirmed = false,
                            FirstName = "Jochem",
                            LastName = "Beckers",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jochembeckers"
                        },
                        new
                        {
                            Id = 50531122,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d493073c-4aa2-4abf-94e7-f0e52f0a1ef9",
                            EmailConfirmed = false,
                            FirstName = "Pieter",
                            LastName = "Geerts",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "pietergeerts"
                        },
                        new
                        {
                            Id = 84082214,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc6f6a1e-5bea-43cd-acd8-686db15e0170",
                            EmailConfirmed = false,
                            FirstName = "Chris",
                            LastName = "Goyens",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "chrisgoyens"
                        },
                        new
                        {
                            Id = 49014562,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ca8995b-4fbf-467e-bcaf-07b8ac803dc0",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            LastName = "Jacquemin",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "stevenjacquemin"
                        },
                        new
                        {
                            Id = 91813987,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc361c79-1c13-4a90-848e-e761dc08d0c3",
                            EmailConfirmed = false,
                            FirstName = "Geoffrey",
                            LastName = "Jorissen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "geoffreyjorissen"
                        },
                        new
                        {
                            Id = 63117126,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5c23f1c-85aa-489e-a323-090b279b7b74",
                            EmailConfirmed = false,
                            FirstName = "Rob",
                            LastName = "Jorissen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "robjorissen"
                        },
                        new
                        {
                            Id = 30441858,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04a644b4-80ec-4b29-9e62-fa7f77690918",
                            EmailConfirmed = false,
                            FirstName = "Sigrid",
                            LastName = "Meesters",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sigridmeesters"
                        },
                        new
                        {
                            Id = 52449732,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "803c2b48-8c5d-4588-8b8f-ce7ea6341971",
                            EmailConfirmed = false,
                            FirstName = "Wouter",
                            LastName = "Paps",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "wouterpaps"
                        },
                        new
                        {
                            Id = 15559621,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8073f747-e987-4d52-881f-277167503e9c",
                            EmailConfirmed = false,
                            FirstName = "Robby",
                            LastName = "Quintiens",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "robbyquintiens"
                        },
                        new
                        {
                            Id = 46559947,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ded9e60e-6c35-4eb3-8382-0eea8cad135a",
                            EmailConfirmed = false,
                            FirstName = "Nadine",
                            LastName = "Vaesen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nadinevaesen"
                        },
                        new
                        {
                            Id = 11903691,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62a7bd92-ba2f-4944-9a2c-31eeba5ed247",
                            EmailConfirmed = false,
                            FirstName = "Jan",
                            LastName = "Vinkenroye",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "janvinkenroye"
                        },
                        new
                        {
                            Id = 97305845,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8966e83-d9eb-43d1-906a-71d9ad271a67",
                            EmailConfirmed = false,
                            FirstName = "Jeff",
                            LastName = "Willen",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jeffwillen"
                        });
                });

            modelBuilder.Entity("Presences.Domain.MomentStudent", b =>
                {
                    b.HasOne("Presences.Domain.Moment", "Moment")
                        .WithMany("MomentUsers")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presences.Domain.Student", "Student")
                        .WithMany("MomentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Presences.Domain.Moment", b =>
                {
                    b.Navigation("MomentUsers");
                });

            modelBuilder.Entity("Presences.Domain.Student", b =>
                {
                    b.Navigation("MomentStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
